{"ast":null,"code":"import { isValidElement as r, cloneElement as e, createElement as s, Fragment as n } from \"react\";\nimport { useFormContext as a, get as t } from \"react-hook-form\";\n\nvar o = function (o) {\n  var m = o.as,\n      f = o.errors,\n      i = o.name,\n      u = o.message,\n      c = o.render,\n      g = function (r, e) {\n    if (null == r) return {};\n    var s,\n        n,\n        a = {},\n        t = Object.keys(r);\n\n    for (n = 0; n < t.length; n++) e.indexOf(s = t[n]) >= 0 || (a[s] = r[s]);\n\n    return a;\n  }(o, [\"as\", \"errors\", \"name\", \"message\", \"render\"]),\n      l = a(),\n      d = t(f || l.errors, i);\n\n  if (!d) return null;\n  var p = d.message,\n      v = d.types,\n      h = Object.assign({}, g, {\n    children: p || u\n  });\n  return r(m) ? e(m, h) : c ? c({\n    message: p || u,\n    messages: v\n  }) : s(m || n, h);\n};\n\nexport { o as ErrorMessage };","map":{"version":3,"sources":["../src/ErrorMessage.tsx"],"names":["ErrorMessage","as","errors","name","message","render","rest","methods","useFormContext","error","get","messageFromRegister","types","props","Object","assign","children","React","messages"],"mappings":";;;AAIMA,IAAAA,CAAAA,GAAe,UAAA,CAAA,EAAA;AAAA,MAQnBC,CAAAA,GAAAA,CAAAA,CAAAA,EARmB;AAAA,MASnBC,CAAAA,GAAAA,CAAAA,CAAAA,MATmB;AAAA,MAUnBC,CAAAA,GAAAA,CAAAA,CAAAA,IAVmB;AAAA,MAWnBC,CAAAA,GAAAA,CAAAA,CAAAA,OAXmB;AAAA,MAYnBC,CAAAA,GAAAA,CAAAA,CAAAA,MAZmB;AAAA,MAahbgB;AAAA,MAebC,CAAAA,GAAUC,CAAAA,EAfG;AAAA,MAgBbC,CAAAA,GAAQC,CAAAA,CAAIR,CAAAA,IAAUK,CAAAA,CAAQL,MAAtBQ,EAA8BP,CAA9BO,CAhBK;;AAkBnB,MAAA,CAAKD,CAAL,EACE,OAAA,IAAA;AAAA,MAGeE,CAAAA,GAA+BF,CAAAA,CAAxCL,OAHN;AAAA,MAGoCQ,CAAAA,GAAUH,CAAAA,CAAVG,KAHpC;AAAA,MAIIC,CAAAA,GAAQC,MAAAA,CAAOC,MAAPD,CAAc,EAAdA,EAAkBR,CAAlBQ,EAAwB;AACpCE,IAAAA,QAAAA,EAAUL,CAAAA,IAAuBP;AADG,GAAxBU,CAJZ;AAQF,SAAOG,CAAAA,CAAqBhB,CAArBgB,CAAAA,GACHA,CAAAA,CAAmBhB,CAAnBgB,EAAuBJ,CAAvBI,CADGA,GAEHZ,CAAAA,GACCA,CAAAA,CAAO;AACND,IAAAA,OAAAA,EAASO,CAAAA,IAAuBP,CAD1B;AAENc,IAAAA,QAAAA,EAAUN;AAFJ,GAAPP,CADDA,GAKAY,CAAAA,CAAqBhB,CAAAA,IAAiBgB,CAAtCA,EAAsDJ,CAAtDI,CAPJ;AAO0DJ,CAlCtDb;;AAkCsDa,SAAAA,CAAAA,IAAAA,YAAAA","sourcesContent":["import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"]},"metadata":{},"sourceType":"module"}