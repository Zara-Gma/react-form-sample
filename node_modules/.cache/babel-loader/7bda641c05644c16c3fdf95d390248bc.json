{"ast":null,"code":"var _jsxFileName = \"/Users/zaraguevara/Documents/www/Companies/cyberDEI/forms/member-form/January8/src/memberForm/Step3.js\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport { useData } from \"../DataContext\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { PrimaryButton } from \"../components/PrimaryButton\";\nimport { MainContainer } from \"../components/MainContainer\";\nimport { Form } from \"../components/Form\";\nimport { Input } from \"../components/Input\";\nimport * as yup from \"yup\";\nimport { parsePhoneNumberFromString } from 'libphonenumber-js';\nconst schema = yup.object().shape({\n  email: yup.string().email(\"Email should have correct format\").required(\"Email is a required field\")\n});\n\nconst normalizePhoneNumber = value => {\n  const phoneNumber = parsePhoneNumberFromString(value);\n\n  if (!phoneNumber) {\n    return value;\n  }\n\n  return phoneNumber.formatInternational();\n};\n\nexport const Step3 = () => {\n  var _errors$email;\n\n  const {\n    setValues,\n    data\n  } = useData();\n  const history = useHistory();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm({\n    defaultValues: {\n      email: data.email,\n      hasPhone: data.hasPhone,\n      phoneNumber: data.phoneNumber\n    },\n    mode: \"onBlur\",\n    resolver: yupResolver(schema)\n  });\n  const hasPhone = watch(\"hasPhone\");\n\n  const onSubmit = data => {\n    history.push(\"./Step4.js\");\n    setValues(data);\n  };\n\n  return /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"Example dependent field\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    id: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    name: \"email\",\n    error: !!errors.email,\n    helperText: errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      defaultValue: data.hasPhone,\n      defaultChecked: data.hasPhone,\n      color: \"primary\",\n      inputRef: register,\n      name: \"hasPhone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }),\n    label: \"Do you have a phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), hasPhone && /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    id: \"phoneNumber\",\n    type: \"tel\",\n    label: \"Phone Number\",\n    name: \"phoneNumber\",\n    onChange: event => {\n      event.target.value = normalizePhoneNumber(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(PrimaryButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Next\")));\n};","map":{"version":3,"sources":["/Users/zaraguevara/Documents/www/Companies/cyberDEI/forms/member-form/January8/src/memberForm/Step3.js"],"names":["React","useHistory","useForm","yupResolver","useData","FormControlLabel","Typography","Checkbox","PrimaryButton","MainContainer","Form","Input","yup","parsePhoneNumberFromString","schema","object","shape","email","string","required","normalizePhoneNumber","value","phoneNumber","formatInternational","Step3","setValues","data","history","register","handleSubmit","watch","errors","defaultValues","hasPhone","mode","resolver","onSubmit","push","message","event","target"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport { useData } from \"../DataContext\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { PrimaryButton } from \"../components/PrimaryButton\";\nimport { MainContainer } from \"../components/MainContainer\";\nimport { Form } from \"../components/Form\";\nimport { Input } from \"../components/Input\";\nimport * as yup from \"yup\";\nimport { parsePhoneNumberFromString } from 'libphonenumber-js'\n\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Email should have correct format\")\n    .required(\"Email is a required field\"),\n});\n\nconst normalizePhoneNumber = (value) => {\n  const phoneNumber = parsePhoneNumberFromString(value)\n  if(!phoneNumber){\n    return value\n  }\n\n  return (\n    phoneNumber.formatInternational() \n  );\n};\n\nexport const Step3 = () => {\n  const { setValues, data } = useData();\n  const history = useHistory();\n  const { register, handleSubmit, watch, errors } = useForm({\n    defaultValues: {\n      email: data.email,\n      hasPhone: data.hasPhone,\n      phoneNumber: data.phoneNumber,\n    },\n    mode: \"onBlur\",\n    resolver: yupResolver(schema),\n  });\n  const hasPhone = watch(\"hasPhone\");\n\n  const onSubmit = (data) => {\n    history.push(\"./Step4.js\");\n    setValues(data);\n  };\n\n  return (\n    <MainContainer>\n      <Typography component=\"h2\" variant=\"h5\">\n         Example dependent field\n      </Typography>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Input\n          ref={register}\n          id=\"email\"\n          type=\"email\"\n          label=\"Email\"\n          name=\"email\"\n          error={!!errors.email}\n          helperText={errors?.email?.message}\n          required\n        />\n\n        <FormControlLabel\n          control={\n            <Checkbox defaultValue={data.hasPhone} defaultChecked={data.hasPhone} color=\"primary\" inputRef={register} name=\"hasPhone\" />\n          }\n          label=\"Do you have a phone\"\n        />\n\n        {hasPhone && (\n          <Input\n            ref={register}\n            id=\"phoneNumber\"\n            type=\"tel\"\n            label=\"Phone Number\"\n            name=\"phoneNumber\"\n            onChange={(event) => {\n              event.target.value = normalizePhoneNumber(event.target.value);\n            }}\n          />\n        )}\n        <PrimaryButton>Next</PrimaryButton>\n      </Form>\n    </MainContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}